"""
<Program Name>
  pre_calibration.r2py

<Purpose>
  This is a script of pre calibration stage for better step estimation
  with different device. To get gravity constant, sampling rate and noise
  level from first 100 samples. 
"""





class pre_calibration:
	def __init__(self, current_time):
		self.mag_list = []
		self.start_time = current_time
		self.average = 0.0


	def _update(self, data):
		self.mag_list.append(data)
		


	# gravity constant estimated by mean of acceleration
	def _get_gravity(self):
		sum_mag = 0
		length = len(self.mag_list)
		for i in range(0, length):
			sum_mag += self.mag_list[i]
		self.average = sum_mag/length
		return self.average


	# moving average filter windows size estimaed by sampling rate
	# and minimum path interval
	def _get_moving_rate(self, time):
		moving_average_sample = int(0.125/((time - self.start_time)/len(self.mag_list)))
		if moving_average_sample < 4:
			moving_average_sample = 4
		return moving_average_sample 



	# threshold estimated by noise level, which based on max noise level 
	# and standard deviation of noise. std used to avoid some unexpected 
	# large value pulse which may cause unexpected threshold value
	# estimated noise pk-pk = std * 6~8
	def _get_threshold(self):
		sum_variance = 0.0
		max_noise = self.mag_list[0]
		length = len(self.mag_list)
		for i in range(1, length):
			if max_noise < self.mag_list[i]:
				max_noise = self.mag_list[i]
			sum_variance = sum_variance + (self.mag_list[i]-self.average)**2
		max_noise = max_noise - self.average
		variance_mag = sum_variance/length
		std_mag = variance_mag**0.5
		if max_noise > std_mag * 8 and max_noise < std_mag * 16:
			threshold = (max_noise) * 2
		else:
			threshold = std_mag * 16
		return threshold



# -*- mode: python;-*-


