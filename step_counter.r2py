"""
Modified from Prof. Zhuang's acclerometer.r2py and location_wifi.r2py
By Yu
"""

sensorlib = dy_import_module("sensorlib.r2py")

# get a connection to communicate with sensors
port = sensorlib.get_connectionport()
sensor_socket = sensorlib.getconnection(port)

# define sensor/method/arg in code: 
start_sensing(2, 0)

MAX_TIME = 120                        # Max program running time
STEP_INTERVAL = 0.25                  # Minimum time difference between each step

pre_flag = 0                          # The flag for preset threshold value

mag_threshold = 100.0                 # Dynamic threshold later, preset to avoid step counter about 1 second
moving_average_sample = 4             # Dynamic sampling rate later, sample number for moving average filter

gravity_constant = 9.81               # Preset for a while, will be changed after pre calibration stage

max_noise_level = 0.00                # Preset the threshold for first 5 steps

count = 0                             # Total count
interval_step_count = 0               # Count for each step
step_count = 0                        # Walking step count

lastMagNoG = 0.00                     # The last recorded magnitutde
#mag = []

pre_sum_variance = 0.00               # For standard deviation calulation

filtered_magNoG = 0.0                 # Magnititude after filtering
movingAverage = []                    # Window for moving average filter
last_step_time = 0.00                 # Time point for last walking step
sum_mag = 0.00                        # For average calculation
sum_variance = 0.0                    # For vriance calculation
sum_gravity = 0.0                     # For gravity constant calculation

noise = []                            # Pre calibration noise

resultstring = "Time, x, y, z\n"
stepString = "Time, step_count, frequency, a_variance\n"
rawString = "Time, mag\n"
filteredString = "Time, mag\n"

starttime = getruntime()
current_time = starttime

while(getruntime() - starttime < MAX_TIME):
  try:
    sensor_data = get_acceleration()
    last_time = current_time
    current_time = getruntime()
    
    x1 = str(sensor_data[0])
    y1 = str(sensor_data[1])
    z1 = str(sensor_data[2])

    if (x1 != 'None' and y1 != 'None' and z1 != 'None'):  # In few seconds begining, sensibility testbed may output 'None'

      resultstring = resultstring + str(current_time) + ',' + str(sensor_data[0]) + ',' + str(sensor_data[1]) + ',' + str(sensor_data[2]) + '\n'
      x = float(x1)
      y = float(y1)
      z = float(z1)

      count = count + 1

      #------------------------------------------------------Gravity constant and sampling rate pre calibration stage

      if count > 0 and count < 100:
        sum_gravity = sum_gravity + (x**2 + y**2 + z**2)**0.5
        if count == 1:
          begin_count_time = getruntime()
      elif count == 100:
        gravity_constant = sum_gravity/99
        moving_average_sample = int(0.125/((getruntime() - begin_count_time)/99))
        if moving_average_sample < 4:
          moving_average_sample = 4

 #    elif count == 200:
 #      mag_threshold = std_mag * 2 + average_mag
        
        log(moving_average_sample, gravity_constant)

      #-----------------------------------------------------

      #-----------------------------------------------------Find out the maximum noise level, set it as threshold value for pre calibration stage

      magNoG = (x**2 + y**2 + z**2)**0.5 - gravity_constant
      rawString = rawString + str(current_time) + ',' + str(magNoG) + '\n'

      if count > 100 and count < 200:
        if magNoG > max_noise_level:
          max_noise_level = magNoG
          noise.append(magNoG)
      elif count == 200:
        sum_noise = 0.0
        sum_noise_variance = 0.0
        length_noise = len(noise)
        for i in range (0, length_noise):
          sum_noise = sum_noise + noise[i]
        average_noise = sum_noise / length_noise 
        for i in range (0, length_noise ):
          sum_noise_variance = sum_noise_variance + (noise[i]-average_noise)**2/length_noise
        std_noise = sum_noise_variance ** 0.5


        if max_noise_level > std_noise * 8:  #for random noise, pk-pk = 6~8 * std, ref: http://www.dspguide.com/ch2/2.htm
          mag_threshold = std_mag * 16
        else:
          mag_threshold = max_noise_level * 2
        log('--------' + str(mag_threshold) + ',' + str(std_mag) + '\n')

      #------------------------------------------------------

      #-------------------------------------------------------Moving Average Filter

      if current_time - last_time > 0.25:
        movingAverage = []
      if len(movingAverage) < moving_average_sample:
        movingAverage.append(magNoG)
        filtered_magNoG = 0.0
        for i in range(0,len(movingAverage)):
          filtered_magNoG = filtered_magNoG + movingAverage[i]
        filtered_magNoG = filtered_magNoG/len(movingAverage)
        
      elif len(movingAverage) == moving_average_sample:
        filtered_magNoG = 0.0
        for i in range(0,moving_average_sample-1):
          movingAverage[i] = movingAverage[i+1]
          filtered_magNoG = filtered_magNoG + movingAverage[i]
        movingAverage[moving_average_sample-1] = magNoG
        filtered_magNoG = filtered_magNoG + magNoG
        filtered_magNoG = filtered_magNoG/moving_average_sample

      #mag.append(filtered_magNoG)
      filteredString = filteredString + str(current_time) + ',' + str(filtered_magNoG) + '\n'

      #-------------------------------------------------------
      
      #-------------------------------------------------------Variance and average calculation

      sum_mag = sum_mag + filtered_magNoG
      
      average_mag = sum_mag/count

      sum_variance = sum_variance + (filtered_magNoG-average_mag)**2
      variance_mag = sum_variance/count

      std_mag = variance_mag**0.5

      #-------------------------------------------------------

      #-------------------------------------------------------Threshold pre calibration

      if step_count > 0 and step_count < 6:
        pre_sum_variance = pre_sum_variance + (filtered_magNoG-average_mag)**2

      elif step_count == 6 and pre_flag == 0:
        pre_std = pre_sum_variance / (count - 1 - pre_learned_sample)
        #mag_threshold = pre_std ** 0.5 * 0.8
        pre_flag = 1
      
      #-------------------------------------------------------

      #-------------------------------------------------------Walking step detection

      if (count > 0) and (current_time - last_step_time > STEP_INTERVAL):
        if (lastMagNoG <= mag_threshold) and (filtered_magNoG > mag_threshold):
          step_count = step_count + 1

          #-------------------------------------------------------Sampling rate per step pre calibration

          if step_count == 1:
            pre_learned_sample = count
#          elif step_count == 6:
#            moving_average_sample = (count - pre_learned_sample)/20  #/5 then /4 for running

          #-------------------------------------------------------

          time_interval = current_time - last_step_time
          f = 1/time_interval
          last_step_time = current_time
          
 #         if step_count > 5:
  #          mag_threshold = std_mag
         
          stepString = stepString + str(current_time) + ',' + str(step_count) + ',' + str(f) + ',' + str(variance_mag) +'\n'
          log(current_time, step_count, str(mag_threshold) + ',' + str(std_mag) + ',' + str(average_mag) + ',' + str(gravity_constant) + ',' + str(moving_average_sample) + '\n')
      #log(str(mag_threshold) + ',' + str(std_mag) + ',' + str(average_mag) + ',' + str(gravity_constant) +'\n')
      
      lastMagNoG = filtered_magNoG


  except Exception as e:
    log(str(e), '\n')
    stop_sensing()
    sensor_socket.close()
    #raise

stop_sensing()
sensor_socket.close()


#-------------------------------------------------------File writing

myfilelist = listfiles()

filename = "accelerometer_data"

if filename in myfilelist:
  removefile(filename)  
myfileobject = openfile(filename, True)
myfileobject.writeat(resultstring, 0)
myfileobject.close()

filename = "step_count"

if filename in myfilelist:
  removefile(filename)
myfileobject = openfile(filename, True)
myfileobject.writeat(stepString, 0)
myfileobject.close()

filename = "mag_raw"

if filename in myfilelist:
  removefile(filename)
myfileobject = openfile(filename, True)
myfileobject.writeat(rawString, 0)
myfileobject.close()

filename = "mag_filter"

if filename in myfilelist:
  removefile(filename)
myfileobject = openfile(filename, True)
myfileobject.writeat(filteredString, 0)
myfileobject.close()


duration = (getruntime() - starttime) / count
log(str(duration), step_count)
