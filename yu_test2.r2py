"""
Modified from Prof. Zhuang's acclerometer.r2py and location_wifi.r2py
By Yu
"""

sensorlib = dy_import_module("sensorlib.r2py")

# get a connection to communicate with sensors
port = sensorlib.get_connectionport()
sensor_socket = sensorlib.getconnection(port)

# define sensor/method/arg in code: 
sensorlib.request_data(sensor_socket, 'startSensingTimed', [1, 1])

count = 0
count_location = 0
location = None
starttime = getruntime()
MAX_TIME = 120

resultstring = "Time, x, y, z\n"
locationstring = "Time, Latitude, Longitude\n"
while(getruntime() - starttime < MAX_TIME):
  try:

    sensor_data = sensorlib.request_data(sensor_socket, 'sensorsReadAccelerometer', []) 
    log(sensor_data, '\n')

    resultstring = resultstring + str(getruntime()) + ',' + str(sensor_data[0]) + ',' + str(sensor_data[1]) + ',' + str(sensor_data[2]) + '\n'
    count = count + 1

    location_time = getruntime()

    try:
      location = get_location()
      if location:
        log("time to get location: " + str(getruntime() - location_time) + "\n")
        log("blurred location: ", location, "\n\n")
        locationstring = locationstring + str(getruntime()) + ',' + str(location["latitude"]) + ',' + str(location["longitude"]) +'\n'
        count_location = count_location + 1
        
    except Exception: # Not able to use LocationNotFoundException here
      location = None
    
  except Exception as e:
    log(str(e), '\n')
    sensorlib.request_data(sensor_socket, 'stopSensing', []) 
    sensor_socket.close()
    #raise


myfilelist = listfiles()
filename = "accelerometer_data"
filename2 = "location_data"

if filename in myfilelist:
  removefile(filename)  
if filename2 in myfilelist:
  removefile(filename2)

myfileobject = openfile(filename, True)
myfileobject.writeat(resultstring, 0)
myfileobject.close()

myfileobject2 = openfile(filename2, True)
myfileobject2.writeat(locationstring, 0)
myfileobject2.close()



duration = (getruntime() - starttime) / count
duration_location = (getruntime() - starttime) / count_location
log(str(duration), ', ', str(duration_location))
sensorlib.request_data(sensor_socket, 'stopSensing', [])
sensor_socket.close()